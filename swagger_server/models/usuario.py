# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Usuario(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, nombre: str=None, apellido: str=None, email: str=None, password: str=None, role: str=None):  # noqa: E501
        """Usuario - a model defined in Swagger

        :param id: The id of this Usuario.  # noqa: E501
        :type id: int
        :param nombre: The nombre of this Usuario.  # noqa: E501
        :type nombre: str
        :param apellido: The apellido of this Usuario.  # noqa: E501
        :type apellido: str
        :param email: The email of this Usuario.  # noqa: E501
        :type email: str
        :param password: The password of this Usuario.  # noqa: E501
        :type password: str
        :param role: The role of this Usuario.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'id': int,
            'nombre': str,
            'apellido': str,
            'email': str,
            'password': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'nombre': 'nombre',
            'apellido': 'apellido',
            'email': 'email',
            'password': 'password',
            'role': 'role'
        }
        self._id = id
        self._nombre = nombre
        self._apellido = apellido
        self._email = email
        self._password = password
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'Usuario':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Usuario of this Usuario.  # noqa: E501
        :rtype: Usuario
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Usuario.


        :return: The id of this Usuario.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Usuario.


        :param id: The id of this Usuario.
        :type id: int
        """

        self._id = id

    @property
    def nombre(self) -> str:
        """Gets the nombre of this Usuario.


        :return: The nombre of this Usuario.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """Sets the nombre of this Usuario.


        :param nombre: The nombre of this Usuario.
        :type nombre: str
        """

        self._nombre = nombre

    @property
    def apellido(self) -> str:
        """Gets the apellido of this Usuario.


        :return: The apellido of this Usuario.
        :rtype: str
        """
        return self._apellido

    @apellido.setter
    def apellido(self, apellido: str):
        """Sets the apellido of this Usuario.


        :param apellido: The apellido of this Usuario.
        :type apellido: str
        """

        self._apellido = apellido

    @property
    def email(self) -> str:
        """Gets the email of this Usuario.


        :return: The email of this Usuario.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Usuario.


        :param email: The email of this Usuario.
        :type email: str
        """

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this Usuario.


        :return: The password of this Usuario.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Usuario.


        :param password: The password of this Usuario.
        :type password: str
        """

        self._password = password

    @property
    def role(self) -> str:
        """Gets the role of this Usuario.


        :return: The role of this Usuario.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Usuario.


        :param role: The role of this Usuario.
        :type role: str
        """

        self._role = role
